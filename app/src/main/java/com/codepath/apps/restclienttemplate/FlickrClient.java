package com.codepath.apps.restclienttemplate;

import android.content.Context;
import android.os.AsyncTask;

import com.codepath.apps.restclienttemplate.utils.UploadPhotoHandler;
import com.codepath.oauth.OAuthBaseClient;
import com.googlecode.flickrjandroid.Flickr;
import com.googlecode.flickrjandroid.FlickrException;
import com.googlecode.flickrjandroid.RequestContext;
import com.googlecode.flickrjandroid.oauth.OAuth;
import com.googlecode.flickrjandroid.oauth.OAuthToken;
import com.googlecode.flickrjandroid.uploader.UploadMetaData;
import com.loopj.android.http.AsyncHttpResponseHandler;
import com.loopj.android.http.RequestParams;

import org.scribe.builder.api.Api;
import org.scribe.builder.api.FlickrApi;
import org.scribe.model.Token;
import org.xml.sax.SAXException;

import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;

public class FlickrClient extends OAuthBaseClient {
    public static final Class<? extends Api> REST_API_CLASS = FlickrApi.class;
    public static final String REST_URL = "http://www.flickr.com/services";
    public static final String REST_CONSUMER_KEY = "2f02a4b3865e3d5031b751b2938dec5d";
    public static final String REST_CONSUMER_SECRET = "409f82d889991535";
    public static final String REST_CALLBACK_URL = "oauth://cprest";

    public static final String REST_API_URL = "https://api.flickr.com/services/rest";
    public static final String UPLOAD_API_URL = "https://up.flickr.com/services/upload";

    public FlickrClient(Context context) {
        super(context, REST_API_CLASS, REST_URL, REST_CONSUMER_KEY, REST_CONSUMER_SECRET, REST_CALLBACK_URL);
        setBaseUrl(REST_API_URL);
    }

    public void getUsername(AsyncHttpResponseHandler handler) {
        String apiUrl = getApiUrl("?method=flickr.test.login&format=json&nojsoncallback=1");
        client.get(apiUrl, null, handler);
    }

    public void getAlbumPhotos(String albumId, AsyncHttpResponseHandler handler) {
        String apiUrl = getApiUrl("");
        RequestParams params = new RequestParams();
        params.put("method", "flickr.photosets.getPhotos");
        params.put("format", "json");
        params.put("nojsoncallback", "1");
        params.put("photoset_id", albumId);
        params.put("extras", "tags,url_o");
        client.get(apiUrl, params, handler);
    }
    
    public void createPhotoSet(String title, String photoId, AsyncHttpResponseHandler handler) {
        String apiUrl = getApiUrl("?method=flickr.photosets.create&format=json&nojsoncallback=1");
        RequestParams params = new RequestParams();
        params.put("title", title);
        params.put("description", "Album generated by FlickMeIn!");
        params.put("primary_photo_id", photoId);
        client.get(apiUrl, params, handler);
    }

    // Returns photoId
    public void uploadPhoto(InputStream photoStream, String[] tags, UploadPhotoHandler handler) {
        OAuth auth = new OAuth();
        auth.setToken(new OAuthToken(client.getAccessToken().getToken(), client.getAccessToken().getSecret()));

        UploadMetaData metaData = new UploadMetaData();
        metaData.setTags(Arrays.asList(tags));
        new UploadPhotoTask(auth, metaData, handler).execute(photoStream);
    }

    public Token getAccessToken() {
        return client.getAccessToken();
    }

    public class UploadPhotoTask extends AsyncTask<InputStream, Void, String> {
        private OAuth auth;
        private UploadMetaData metadata;
        private Flickr f;
        private UploadPhotoHandler handler;

        public UploadPhotoTask(OAuth auth, UploadMetaData metadata, UploadPhotoHandler handler) {
            this.auth = auth;
            this.metadata = metadata;
            this.f = new Flickr(REST_CONSUMER_KEY, REST_CONSUMER_SECRET);
            this.handler = handler;
        }

        @Override
        protected String doInBackground(InputStream... stream) {
            // Upload metadata
            String photoId = "";
            RequestContext.getRequestContext().setOAuth(auth);
            try {
                photoId = f.getUploader().upload("FlickMeIn", stream[0], metadata);
                return photoId;
            } catch(IOException e) {
                e.printStackTrace();
            } catch (FlickrException e) {
                e.printStackTrace();
            } catch (SAXException e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected void onPostExecute(String s) {
            if (s != null) {
                handler.onSuccess(s);
            } else {
                handler.onFailure();
            }
            super.onPostExecute(s);
        }
    }
}
